name: EKS Promotion pipeline

on:
  issue_comment:
    types: 
      - created

permissions:
  id-token: write
  contents: write
  issues: write

jobs:
  promote_pipeline:
    if: ${{ !github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.promote.outputs.environment }}
      account: ${{ steps.promote.outputs.account }}
      tag: ${{ steps.promote.outputs.tag }}
      demo: ${{ steps.promote.outpus.demo }}
      sandbox: ${{ steps.promote.outpus.sandbox }}
      production: ${{ steps.promote.outpus.production }}
    steps:
      - name: Check comment from assignees
        id: check
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          author=$(echo "$GITHUB_CONTEXT" | jq '.event.comment.user.login')
          comment=$(echo "$GITHUB_CONTEXT" | jq '.event.comment.body')
          if [[ "$comment" == *"promote"* ]];
          then
            echo "Pipeline autorized, ready to promote to the next environment"
            ## Notify to slack
          else
            echo "Pipeline comment rejected. Not autorized"
            ## Notify to slack
            exit 1;
          fi
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::602655069356:role/gh-deployment-role
          aws-region: us-east-1
      - name: Get promotion pipeline state
        id: state
        run: |
          state=$(aws dynamodb get-item --output json --table-name dashboard-promotion-pipeline --key '{"issue":{"N":"${{ github.event.issue.number }}"}}' | jq '.Item' | tr -d '\n')
          if [[ "$state" == "" ]];
          then
            echo "Promotion Pipeline not found in database"
            exit 1;
          else
            echo "state=${state}" >> $GITHUB_OUTPUT
          fi
      - name: Get next environment
        id: promote
        env:
          accounts_ids: '{"demo":362913166060,"sandbox":474670672067,"production":847541778993}'
        run: |
          # Promote to the next environment
          tag=$(echo '${{steps.state.outputs.state}}' | jq '.tag.S')
          demo=$(echo '${{steps.state.outputs.state}}' | jq '.demo.BOOL')
          sandbox=$(echo '${{steps.state.outputs.state}}' | jq '.sandbox.BOOL')
          production=$(echo '${{steps.state.outputs.state}}' | jq '.production.BOOL')
          environment=""
          account=""
          if [[ "$demo" == "true" ]];
          then
            if [[ "$sandbox" == "true" ]];
            then
              environment="production"
              production=true
              account=$(echo $accounts_ids | jq '.production')
            else
              environment="sandbox"
              sandbox=true
              account=$(echo $accounts_ids | jq '.sandbox')
            fi
          else
            environment="demo"
            demo=true
            account=$(echo $accounts_ids | jq '.demo')
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "account=$account" >> $GITHUB_OUTPUT
          echo "environment=$environment" >> $GITHUB_OUTPUT
          echo "demo=$demo" >> $GITHUB_OUTPUT
          echo "sandbox=$sandbox" >> $GITHUB_OUTPUT
          echo "production=$production" >> $GITHUB_OUTPUT
          echo $demo $sandbox $production
          echo $environment $account
          cat $GITHUB_OUTPUT
      - name: Notify next environment to deploy
        run: |
          echo "Environemnt: ${{steps.promote.outputs.environment}}. Account: ${{steps.promote.outputs.account}}. Tag: ${{steps.promote.outputs.tag}}."

  deploy_release:
    runs-on: ubuntu-latest
    needs: [promote_pipeline]
    steps:
      - name: Checkout helm repository
        run: |
          echo "release"
          echo "deploy"
          echo "notify"
  
  update_pipeline:
    needs: [promote_pipeline, deploy_release]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::602655069356:role/gh-deployment-role
          aws-region: us-east-1
      - name: Update pipeline state
        id: state
        run: |
          aws dynamodb update-item --table-name dashboard-promotion-pipeline --key '{"issue":{"N":"${{ github.event.issue.number }}"}}' --attribute-updates '{"${{ needs.promote_pipeline.outputs.environment }}": {"Value":{"BOOL":true}}}'
      - name: Update issue comment
        run: |
          curl -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{github.token}}" \
          https://api.github.com/repos/${{github.repository}}/issues/${{ github.event.issue.number }}/comments \
          -d "{\"body\":\"${{ needs.promote_pipeline.outputs.environment }} was successfully promoted. Tag: ${{ needs.promote_pipeline.outputs.tag }}\"}"
      - name: Update issue table
        run: |
          demoStatus="Pending"
          sandboxStatus="Pending"
          productionStatus="Pending"
          if [[ ${{ needs.promote_pipeline.outputs.demo }} ]]; then demoStatus="Deployed"; fi
          if [[ ${{ needs.promote_pipeline.outputs.sandbox }} ]]; then sandboxStatus="Deployed"; fi
          if [[ ${{ needs.promote_pipeline.outputs.production }} ]]; then productionStatus="Deployed"; fi
          curl -X PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{github.token}}" \
          https://api.github.com/repos/${{github.repository}}/issues/${{ github.event.issue.number }} \
          -d "{\"body\":\"# New promotion pipeline created for tag ${{ needs.promote_pipeline.outputs.tag }} \n | Environment | Status | \n |---|---| \n | Staging | Deployed | \n | Demo  | ${demoStatus} | \n | Sandbox  | ${sandboxStatus} | \n | Production  | ${productionStatus} |\"}"
      - name: Update issue state
        run: |
          if [[ "${{ needs.promote_pipeline.outputs.environment }}" == "production" ]];
          then
            echo "pipeline finished";
          else
            echo "nothing"
          fi