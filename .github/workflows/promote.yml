name: EKS Promotion pipeline

on:
  issue_comment:
    types: 
      - created

permissions:
  id-token: write
  contents: write
  issues: write

jobs:
  promote_pipeline:
    if: ${{ !github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.promote.outputs.environment }}
      account: ${{ steps.promote.outputs.account }}
      tag: ${{ steps.promote.outputs.tag }}
    steps:
      - name: Check comment from assignees
        id: check
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          approvers: fergo2910,caioariede,JEBoothjr
        run: |
          author=$(echo "$GITHUB_CONTEXT" | jq '.event.comment.user.login')
          comment=$(echo "$GITHUB_CONTEXT" | jq '.event.comment.body')
          echo $author
          if [[ $author == *"$approvers"* ]];
          then
            echo "Pipeline autorized, ready to promote to the next environment"
            ## Notify to slack
          else
            echo "Pipeline comment rejected. Not autorized"
            ## Notify to slack
            exit 1;
          fi
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::602655069356:role/gh-deployment-role
          aws-region: us-east-1
      - name: Get promotion pipeline state
        id: state
        run: |
          state=$(aws dynamodb get-item --output json --table-name dashboard-promotion-pipeline --key '{"issue":{"N":"${{ github.event.issue.number }}"}}' | jq '.Item' | tr -d '\n')
          if [[ "$state" == "" ]];
          then
            echo "Promotion Pipeline not found in database"
            exit 1;
          else
            echo "state=${state}" >> $GITHUB_OUTPUT
          fi
      - name: Get next environment
        id: promote
        env:
          accounts_ids: '{"staging": 963448533985,"develop": 968295074588,"demo":362913166060,"sandbox":474670672067,"production":847541778993}'
        run: |
          # Promote to the next environment
          tag=$(echo '${{steps.state.outputs.state}}' | jq '.tag.S')
          staging=$(echo '${{steps.state.outputs.state}}' | jq '.staging.BOOL')
          demo=$(echo '${{steps.state.outputs.state}}' | jq '.demo.BOOL')
          sandbox=$(echo '${{steps.state.outputs.state}}' | jq '.sandbox.BOOL')
          production=$(echo '${{steps.state.outputs.state}}' | jq '.production.BOOL')
          environment=""
          account=""
          if [[ "$staging" == "true" ]];
          then
            echo "Staging deployed, checking next environment"
            if [[ "$demo" == "true" ]];
            then
              echo "Demo deployed, checking next environment"
              if [[ "$sandbox" == "true" ]];
              then
                echo "Sandbox deployed, checking next environment"
                if [[ "$production" == "true" ]];
                then
                  echo "Production deployed, finish pipeline"
                  exit 0;
                else
                  environment="production"
                  account=$(echo $accounts_ids | jq '.production')
                fi
              else
                environment="sandbox"
                account=$(echo $accounts_ids | jq '.sandbox')
              fi
            else
              environment="demo"
              account=$(echo $accounts_ids | jq '.demo')
            fi
          else
            environment="staging"
            account=$(echo $accounts_ids | jq '.staging')
          fi
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "account=$account" >> $GITHUB_OUTPUT
          echo "environment=$environment" >> $GITHUB_OUTPUT
      - name: Notify next environment to deploy
        run: |
          echo "Environemnt: ${{steps.promote.outputs.environment}}. Account: ${{steps.promote.outputs.account}}. Tag: ${{steps.promote.outputs.tag}}."

  deploy_release:
    runs-on: ubuntu-latest
    needs: [promote_pipeline]
    steps:
      - name: Checkout helm repository
        run: |
          echo "release"
          echo "deploy"
          echo "notify"
  
  update_pipeline:
    needs: [promote_pipeline, deploy_release]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::602655069356:role/gh-deployment-role
          aws-region: us-east-1
      - name: Update pipeline state
        id: state
        env:
          environment: ${{ needs.promote_pipeline.outputs.environment }}
          tag: ${{ needs.promote_pipeline.outputs.tag }}
        run: |
          aws dynamodb update-item --table-name dashboard-promotion-pipeline --key '{"issue":{"N":"${{ github.event.issue.number }}"}}' --attribute-updates '{"$environment": {"Value":{"BOOL":true}}}'
      - name: Update issue comment
        env:
          environment: ${{ needs.promote_pipeline.outputs.environment }}
          tag: ${{ needs.promote_pipeline.outputs.tag }}
        run: |
          # Generate message
          msg = "$environment was successfully promoted using the tag: $tag"
          issue=$(curl -X POST -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{github.token}}" https://api.github.com/repos/${{github.repository}}/issues/${{ github.event.issue.number }}/comments -d '{"body":"$msg"}')
      - name: Update issue table
        env:
          environment: ${{ needs.promote_pipeline.outputs.environment }}
          tag: ${{ needs.promote_pipeline.outputs.tag }}
        run: |
          # Update issue table to show the pipeline state
          msg = "$environment was successfully promoted using the tag: $tag"
          issue=$(curl -X POST -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{github.token}}" https://api.github.com/repos/${{github.repository}}/issues/${{ github.event.issue.number }}/comments -d '{"body":"$msg"}')
      - name: Update issue state
        env:
          environment: ${{ needs.promote_pipeline.outputs.environment }}
          tag: ${{ needs.promote_pipeline.outputs.tag }}
        run: |
          # Update the issue state to close if production was deployed
          msg = "$environment was successfully promoted using the tag: $tag"
          issue=$(curl -X POST -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{github.token}}" https://api.github.com/repos/${{github.repository}}/issues/${{ github.event.issue.number }}/comments -d '{"body":"$msg"}')