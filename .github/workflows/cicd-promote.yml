name: tag to issue

on:
  issue_comment:
    types: 
      - created

jobs:
  promote_pipeline:
    if: ${{ !github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.comment.outputs.image_tag }}
      environment: ${{ steps.comment.outputs.environment }}
      body_array: ${{ steps.comment.outputs.body_array }}
      index: ${{ steps.comment.outputs.index }}
    steps:
      - name: Check if more than one promotion pipeline exists
        run: |
          issues=$(curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{github.token}}" \
          https://api.github.com/repos/${{github.repository}}/issues?labels=promotion-pipeline&state=open)
          issues_numbers=$(echo ${issues} | jq '.[].number')
          length_issues=$(wc -w <<< "$issues_numbers")
          if [[ "$length_issues" == "0" ]];
          then
            echo "Comment from another issue not related to promotion pipeline"
            exit 0;
          elif [[ "$length_issues" == "1" ]] && [[ "$issues_numbers" == "${{ github.event.issue.number }}" ]];
          then
            echo "Ready to promote artifacts"
          else
            echo "Two or more promotion pipelines are open. Only one promotion pipelines should exists"
            for i in $issues_numbers;
            do
              echo "https://github.com/${{github.repository}}/issues/$i"
            done
            exit 1;
          fi
      - name: Check comment from assignees
        id: comment
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          ENVIRONMENTS: "staging, demo, sandbox, production"
        run: |
          author=$(echo "$GITHUB_CONTEXT" | jq '.event.comment.user.login')
          assignees=$(echo "$GITHUB_CONTEXT" | jq '.event.issue.assignees[].login')
          comment=$(echo "$GITHUB_CONTEXT" | jq '.event.comment.body')
          # If comment has promote and comes from any of the assignees 
          if [[ "$assignees" == *"$author"* ]] && [[ "$comment" == *"promote"* ]];
          then
            echo "Pipeline autorized, ready to promote to the next environment"
          else
            echo "Pipeline comment rejected. Not autorized"
            exit 1;
          fi
          # Parse title to get tag to promote
          issue_title=$(echo "$GITHUB_CONTEXT" | jq --raw-output '.event.issue.title')
          title_array=($issue_title)
          tag=${title_array[3]}
          echo "Release tag: $tag"
          # Parse body to get next environment
          issue_body=$(echo "$GITHUB_CONTEXT" | jq --raw-output '.event.issue.body')
          body_array=($issue_body)
          length_body=$(wc -w <<< "${body_array[@]}")
          for (( i=0; i<$length_body; i++ ))
          do
            if [[ "${body_array[$i]}" == "|ðŸ”²|" ]];
            then
              env=$(echo "${body_array[$i-1]}" | awk '{print tolower($0)}')
              if [[ "${ENVIRONMENTS[*]}" =~ "$env" ]];
              then
                echo "Env: $env is ready to be promoted"
              else
                echo "Environment not found."
                exit 1
              fi
              break
            fi
          done
          echo "image_tag=$tag" >> $GITHUB_OUTPUT
          echo "environment=$env" >> $GITHUB_OUTPUT
          echo "body_array=$body_array" >> $GITHUB_OUTPUT
          echo "index=$i" >> $GITHUB_OUTPUT
  
  deploy_release:
    needs: [promote_pipeline]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Dashboard
        env:
          tag: ${{ needs.promote_pipeline.outputs.tag }}
          environment: ${{ needs.promote_pipeline.outputs.environment }}
        run: |
          echo "Release using: Env=$environment Tag:$tag"
  
  deploy_dashboard:
    needs: [promote_pipeline,deploy_release]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Dashboard
        env:
          tag: ${{ needs.promote_pipeline.outputs.tag }}
          environment: ${{ needs.promote_pipeline.outputs.environment }}
        run: |
          echo "Deploying to dashboard using: Env=$environment Tag:$tag"
  
  deploy_Pay:
    needs: [promote_pipeline,deploy_release]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Pay
        env:
          tag: ${{ needs.promote_pipeline.outputs.tag }}
          environment: ${{ needs.promote_pipeline.outputs.environment }}
        run: |
          echo "Deploying to Pay using: Env=$environment Tag:$tag"
  
  update_pipeline:
    needs: [deploy_dashboard,deploy_Pay,promote_pipeline]
    runs-on: ubuntu-latest
    steps:
      - name: Update issue body with new promotion
        env:
          body_array: ${{ needs.promote_pipeline.outputs.body_array }}
          index: ${{ needs.promote_pipeline.outputs.index }}
        run: |
          new_body=""
          length_body=$(wc -w <<< "${body_array[@]}")
          for (( i=0; i<$length_body; i++ ))
          do
            if [[ $i == $index ]];
            then
              new_body=$(echo "$new_body |âœ…|")
            else
              new_body=$(echo "$new_body ${body_array[$i]}")
            fi
          done
          echo $new_body