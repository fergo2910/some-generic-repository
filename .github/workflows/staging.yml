name: EKS Staging build and deploy pipeline

on:
  push:
    tags:
      - hotfix-20**
    branches:
      - 'release/20**'
  workflow_call:
    inputs:
      checkoutBranch:
        description: "Which branch are we deploying from"
        required: true
        type: string

# Cancel in progress builds
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  id-token: write
  contents: write
  issues: write

jobs:
  tags:
    runs-on: ubuntu-latest
    outputs:
      sha7: ${{ steps.sha7.outputs.sha7 }}
      branch_sha7: ${{ steps.sha7.outputs.branch_sha7 }}
      release_type: ${{ steps.sha7.outputs.release_type }}
      checkout_branch: ${{ steps.check.outputs.checkoutBranch }}
    steps:
      - name: Check workflow call
        id: check
        run: |
          if [[ "${{ inputs.checkoutBranch }}" != "" ]];
          then
            echo "Workflow Call, checking code from ${{ inputs.checkoutBranch }}"
            echo "checkoutBranch=${{ inputs.checkoutBranch }}" >> $GITHUB_OUTPUT
          else
            echo "checkoutBranch=${GITHUB_REF}" >> $GITHUB_OUTPUT
          fi
      - name: Checkout selected branch
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.check.outputs.checkoutBranch }}
      - name: Extract SHA with 7 characters and release type
        id: sha7
        run: |
          echo "sha7=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT
          release_type=""
          if [[ "${{ steps.check.outputs.checkoutBranch }}" == *"release"* ]]; then release_type="release"; else release_type="hotfix"; fi
          echo "release_type=${release_type}" >> $GITHUB_OUTPUT
          # Branch + SHA tag
          SHA=$(echo ${GITHUB_SHA} | cut -c1-8)
          BRANCH="${{ steps.check.outputs.checkoutBranch }}"
          BRANCH=$(echo ${BRANCH#refs/})
          BRANCH=$(echo ${BRANCH#heads/})
          BRANCH=$(echo ${BRANCH#tags/})
          BRANCH=$(echo ${BRANCH} | tr '/' '-')
          echo "branch_sha7=${BRANCH}_${SHA}" >> $GITHUB_OUTPUT

  build_release_deploy_notify:
    needs: [tags]
    runs-on: ubuntu-latest
    steps:
      - name: Extract SHA with 7 characters
        run: |
          echo "new pipeline started: type: ${{ needs.tags.outputs.release_type}}"
          echo "build all apps"
          echo "release"
          echo "deploy"
          echo "deployment to staging finish"

  start_promotion_pipeline:
    needs: [tags, build_release_deploy_notify]
    runs-on: ubuntu-latest
    steps:
      - name: Check if a new promotion pipeline already exists
        run: |
          issues=$(curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ github.token }}" \
          https://api.github.com/repos/${{ github.repository }}/issues?labels=${{ needs.tags.outputs.release_type }}-pipeline&state=open)
          issues_numbers=$(echo ${issues} | jq '.[].number')
          if [[ "$issues_numbers" == "" ]];
          then
            echo "No promotion pipeline created."
          else
            echo "One or more promotion pipelines are open. Close them all first to create a new promotion pipeline"
            for i in $issues_numbers;
            do
              echo "https://github.com/${{ github.repository }}/issues/$i"
            done
            exit 1;
          fi
      - name: Create issue with pipeline details
        id: issue
        run: |
          payload="{\"title\":\"AWS PIPELINE: Artifact Promotion for ${{ needs.tags.outputs.branch_sha7 }}\",\"body\":\"# New promotion pipeline created for tag ${{ needs.tags.outputs.sha7 }} \n | Environment | Status | \n |---|---| \n | Staging | Deployed | \n | Sandbox  | Pending | \n | Production  | Pending |\",\"assignees\":[\"fergo2910\"],\"labels\":[\"${{ needs.tags.outputs.release_type }}-pipeline\"]}"
          issue=$(curl -X POST -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ github.token }}" https://api.github.com/repos/${{ github.repository }}/issues -d "$payload" | jq '.number')
          if [[ $issue != "null" ]];
          then
            echo "Issue ID created"
            echo "https://github.com/${{ github.repository }}/issues/${issue}"
            echo "url=https://github.com/${{ github.repository }}/issues/${issue}" >> $GITHUB_OUTPUT
            echo "issue_number=$issue" >> $GITHUB_OUTPUT
          else
            echo "Error creating the issue"
            exit 1
          fi
      - name: Configure AWS Credentials
        run: |
          echo "AWS Config"
      - name: Store state in DynamoDB
        id: state
        run: |
          echo "AWS DynamoDB"
      - name: Slack Notification deployment on staging
        run: |
          echo "slack"
