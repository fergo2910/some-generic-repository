name: Heroku Application Deployment

on:
  workflow_call:    
    inputs:
      herokuApplication:
        description: "Heroku application name"
        required: true
        type: string
      checkoutBranch:
        description: "Which branch are we deploying from"
        required: true
        type: string
      
jobs:
  deploy_heroku_application:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout selected branch
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.checkoutBranch }}
      - name: Get source blob link
        id: source_blob_link
        run: |
          link=$(./scripts/github-blob-link.sh ${{github.token}} ${{github.repository}} ${{ inputs.checkoutBranch }})
          echo "::add-mask::$link"
          echo ::set-output name=blob_link::$link
      - name: Trigger Heroku build
        id: trigger_build_on_heroku_app
        run: |
          heroku_build=$("./scripts/heroku-deploy.sh" ${{ secrets.HEROKU_API_TOKEN }} ${{ inputs.herokuApplication }} ${{ steps.source_blob_link.outputs.blob_link }} ${{ inputs.checkoutBranch }})
          stream_url=$(echo $heroku_build | jq -r .output_stream_url)
          echo ::set-output name=stream_url::$(echo $stream_url)
          build_id=$(echo $heroku_build | jq -r .id)
          echo ::set-output name=build_id::$(echo $build_id)
      - name: Wait for build on application
        id: wait_for_build
        run: |
          curl -fsSN $(echo ${{ steps.trigger_build_on_heroku_app.outputs.stream_url }})
      - name: Wait for release on application
        id: wait_for_release_dashboard
        run: |
          heroku_build=$(curl -fsSv https://api.heroku.com/apps/${{ inputs.herokuApplication }}/builds/${{ steps.trigger_build_on_heroku_app.outputs.build_id }} -H "Accept: application/vnd.heroku+json; version=3" -H "Authorization: Bearer ${{ secrets.HEROKU_API_TOKEN }}")
          release_id=$(echo $heroku_build | jq -r .release.id)
          heroku_release=$(curl -fsSv https://api.heroku.com/apps/${{ inputs.herokuApplication }}/releases/$release_id -H "Accept: application/vnd.heroku+json; version=3" -H "Authorization: Bearer ${{ secrets.HEROKU_API_TOKEN }}")
          stream_url=$(echo $heroku_release | jq -r .output_stream_url)
          if [ "$stream_url" == "null" ]; then
            echo "Release stage finished"
            status=$(echo $heroku_release | jq -r .status)
          else
            curl -fsSN $(echo $stream_url)
            heroku_release=$(curl -fsSv https://api.heroku.com/apps/${{ inputs.herokuApplication }}/releases/$release_id -H "Accept: application/vnd.heroku+json; version=3" -H "Authorization: Bearer ${{ secrets.HEROKU_API_TOKEN }}")
            status=$(echo $heroku_release | jq -r .status)
          fi
          echo ::set-output name=status::$(echo $status)
      - name: Notify Heroku application deployment
        id: slack_heroku_status
        uses: slackapi/slack-github-action@v1.18.0
        with:
          channel-id: slack-webhook-tests
          slack-message: "Staging deployment finished: ${{ steps.wait_for_release_dashboard.outputs.status }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEVOPS_WEBHOOK_URL }}
      - name: Fail workflow if needed
        run: |
          if [ "${{ steps.wait_for_release_dashboard.outputs.status }}" == "succeeded" ]; then
            echo "Deployment to heroku succee"
          else
            exit 1
          fi